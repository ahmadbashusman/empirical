import json
from collections import Counter
import os

# Function to load JSON file
def load_json_file(file_path):
    try:
        with open(file_path, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        print(f"File not found: {file_path}")
        return None

# Function to extract impact metrics and access metrics (considering only CVSS V3 if present, else CVSS V2)
def extract_metrics(cve_data):
    impacts = []
    access_vectors = []
    access_complexities = []

    # Check if impact data is a dictionary
    impact_data = cve_data.get('impact', {})
    if isinstance(impact_data, dict):
        # Extract CVSS V3 metrics
        cvss_v3 = impact_data.get('baseMetricV3', {}).get('cvssV3', {})
        if cvss_v3:
            confidentiality_impact = cvss_v3.get('confidentialityImpact')
            integrity_impact = cvss_v3.get('integrityImpact')
            availability_impact = cvss_v3.get('availabilityImpact')
            access_vector = cvss_v3.get('attackVector')
            access_complexity = cvss_v3.get('attackComplexity')
        else:
            # Extract CVSS V2 metrics if CVSS V3 is not present
            cvss_v2 = impact_data.get('baseMetricV2', {}).get('cvssV2', {})
            confidentiality_impact = cvss_v2.get('confidentialityImpact')
            integrity_impact = cvss_v2.get('integrityImpact')
            availability_impact = cvss_v2.get('availabilityImpact')
            access_vector = cvss_v2.get('accessVector')
            access_complexity = cvss_v2.get('accessComplexity')

        # Append to impacts list if any impact is present
        if confidentiality_impact or integrity_impact or availability_impact:
            impacts.append({
                "confidentialityImpact": confidentiality_impact,
                "integrityImpact": integrity_impact,
                "availabilityImpact": availability_impact
            })
        
        # Append to access vectors and complexities list if any are present
        if access_vector:
            access_vectors.append(access_vector)
        if access_complexity:
            access_complexities.append(access_complexity)

    return impacts, access_vectors, access_complexities

# Path to dataset folder
dataset_folder = './overall8'

# Get list of JSON files in the dataset folder
json_files = [file for file in os.listdir(dataset_folder) if file.endswith('.json')]

# Initialize counters to accumulate impact counts and access metrics
total_confidentiality_counter = Counter()
total_integrity_counter = Counter()
total_availability_counter = Counter()
total_access_vector_counter = Counter()
total_access_complexity_counter = Counter()

# Process each JSON file and accumulate impact counts and access metrics
for file_name in json_files:
    file_path = os.path.join(dataset_folder, file_name)
    cve_json = load_json_file(file_path)

    # Skip files that couldn't be loaded
    if cve_json is None:
        continue

    # Check if the impact field is a list and skip if so
    if isinstance(cve_json.get('impact'), list):
        print(f"Skipping file {file_name} as its 'impact' field is a list")
        continue

    impact_metrics, access_vectors, access_complexities = extract_metrics(cve_json)
    
    # Initialize counters for current file
    confidentiality_counter = Counter()
    integrity_counter = Counter()
    availability_counter = Counter()
    access_vector_counter = Counter()
    access_complexity_counter = Counter()

    # Count impact metrics for current file
    for impact in impact_metrics:
        if impact['confidentialityImpact']:
            confidentiality_counter[impact['confidentialityImpact']] += 1
        if impact['integrityImpact']:
            integrity_counter[impact['integrityImpact']] += 1
        if impact['availabilityImpact']:
            availability_counter[impact['availabilityImpact']] += 1

    # Count access metrics for current file
    for vector in access_vectors:
        access_vector_counter[vector] += 1
    for complexity in access_complexities:
        access_complexity_counter[complexity] += 1

    # Accumulate counts to total counters
    total_confidentiality_counter += confidentiality_counter
    total_integrity_counter += integrity_counter
    total_availability_counter += availability_counter
    total_access_vector_counter += access_vector_counter
    total_access_complexity_counter += access_complexity_counter

# Print the total frequency of each impact type

# Print the total frequency of each access vector type
print("\nTotal Access Vector Frequency:")
for vector, count in total_access_vector_counter.items():
    print(f"{vector}: {count}")

# Print the total frequency of each access complexity type
print("\nTotal Access Complexity Frequency:")
for complexity, count in total_access_complexity_counter.items():
    print(f"{complexity}: {count}")



print("Total Confidentiality Impact Frequency:")
for impact, count in total_confidentiality_counter.items():
    print(f"{impact}: {count}")

print("\nTotal Integrity Impact Frequency:")
for impact, count in total_integrity_counter.items():
    print(f"{impact}: {count}")

print("\nTotal Availability Impact Frequency:")
for impact, count in total_availability_counter.items():
    print(f"{impact}: {count}")
